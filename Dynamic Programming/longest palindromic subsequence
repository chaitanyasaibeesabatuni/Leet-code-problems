### problem statement : https://leetcode.com/problems/longest-palindromic-subsequence/

### Logic : we have to use the two pointer concept here from front to back if here there are two conditions one is if the elements of two pointers are equal then we have 
#### to increment left pointer and decrement left pointer if both pointers are equal position then we have to add one to it else two to it and the second condtion is 
#### if both elements are not equal then we have to increament either right pointer or decrement left pointer 


#### memoisation solution :

def longestpalindromicsubsequence(s):
  n=len(s)
  dp={}
  def dfs(l,r):
    if l>r:
      return 0
    
    if (l,r) in dp:
      return dp[(l,r)]
    longest=0
    if s[l]==s[r]:
      if l==r:
        longest=max(longest,1+dfs(l+1,r-1))
      else:
        longest=max(longest,2+dfs(l+1,r-1))
    else:
      longest=max(dfs(l,r-1),dfs(l+1,r-1))
    dp[(l,r)]=longest
    
    return longest
  return dfs(0,n-1)
  
  
s=input()
print(longestpalindromicsubsequence(s))
