#### problem statement :  https://leetcode.com/problems/maximal-square/

#### Logic :

### the logic is we have to create an cache matrix based on the length of matrix formed by that box in the original ex if an box of matrix form of matrix of 3*3 then 
### fill that box with 3 like that fill the entire matrix and return max of the values

#####Logic to think, we go down,right and diagonal in a rectangle, when will we get a square side?
####The shortest of three distances(right,down,dia) = square side, inside any rectangle.
####Area =(sideXside)



####Solution :

#### bottom-up solution 
def maximalSquare(matrix):
    #bottom-up
    n = len(matrix)
    m = len(matrix[0])
#size of square at i,j position in dp
    dp = [[0 for i in range(m)] for j in range(n)]
    side = 0
    for i in range(1,n):
        for j in range(1,m):
            if matrix[i][j]=="1":
                #dp[i][j] is the final answer, 
                #the last block of the square in this case.
                from_up = dp[i-1][j]
                from_right = dp[i][j-1]
                from_dia = dp[i-1][j-1]
                dp[i][j] = 1+min(from_up,from_right,from_dia)
            side = max(side,dp[i][j])
    return side*side
### recursive solution :

def maximalSquare(matrix):
    row=len(matrix)
    col=len(matrix[0])
    dp={}
    def finder(i,j):
        if i>=row or j>=col:
            return 0
        if (i,j) not in dp:
            down=finder(i+1,j)
            right=finder(i,j+1)
            diag=finder(i+1,j+1)

            dp[(i,j)]=0

            if matrix[i][j]=="1":
                dp[(i,j)]=1+min(down,right,diag)
        return dp[(i,j)]
    finder(0,0)
    return max(dp.values())**2
 
n=int(input())
matrix=[[i for i in input().split()] for i in range(n)]
print(maximalSquare(matrix))
