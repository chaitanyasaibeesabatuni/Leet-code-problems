## problem statement : https://leetcode.com/problems/robot-bounded-in-circle/

#### Logic :

# let us apply basic math to the problem for that if the position and direction of the robot changes then it wasn't in a circle any more so now 
## consider if it changes the direction interchange the directions and apply negative based on the quadrants 


#### solution: 

def robot(s):
  dirx,diry=0,1
  x,y=0,0
  for i in s:
    if i=="G":
      x,y=x+dirx,y+diry
    elif i=="L":
      dirx,diry=-1*diry,dirx
    else:
      dirx,diry=diry,-1*dirx
  return if (x,y)==(0,0) or (dirx,diry)!=(0,1)
  
s=input()
if robot(s):
  print("YES")
else:
  print("NO")


############### Another approach without math

def isRobotBounded(self, instructions: str) -> bool:

    def move(s,direction):
        if direction=="N":
            s[1]+=1
        elif direction=="E":
            s[0]+=1
        elif direction=="W":
            s[0]-=1
        else:
            s[1]-=1

    def get_directionl(curr_dir):
        if curr_dir=="N":
            return "W"
        elif curr_dir=="E":
            return "N"
        elif curr_dir=="W":
            return "S"
        else:
            return "E"

    def get_directionr(curr_dir):
        if curr_dir=="N":
            return "E"
        elif curr_dir=="E":
            return "S"
        elif curr_dir=="W":
            return "N"
        else:
            return "W"

    s = [0,0]
    d  = "N"
    for i in instructions:
        if i=="G":
            move(s,d)

        elif i=="L":
            d = get_directionl(d)

        else:
            d = get_directionr(d)

    return (s[0]==0 and s[1]==0) or d!="N"
                
