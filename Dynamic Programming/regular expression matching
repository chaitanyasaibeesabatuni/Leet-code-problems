#### Problem statement :    https://leetcode.com/problems/regular-expression-matching/

#### Logic : for the base case just take if the both strings are out of bounce then return True and if only p is out of bounce return False
#### and check if the string is match or not if both pointer elements match or match with an " . " we have to use consider it was an match case and for star it was the 
### intersting part in the problem if we check next pointer if star arise then we have to consider the two cases that we are using the star or not using the star and 
#### by storing the values in cache then we have not do the repeated work 


### Top down memoziation solution :



def solution(s,p):
    dp={}
    def dfs(i,j):
        if (i,j) in dp:
            return dp[(i,j)]
        if i>=len(s) and j>=len(p):
            dp[(i,j)]=True
            return dp[(i,j)]
        if j>=len(p):
            dp[(i, j)]=False
            return dp[(i,j)]

        match=i<len(s) and (s[i]==p[j] or p[j]==".")

        if j+1 < len(p) and (p[j+1]=="*"):
            dp[(i, j)]=dfs(i,j+2) or (dfs(i+1,j) and match)
            return dp[(i,j)]
        if match:
            dp[(i, j)]=dfs(i+1,j+1)
            return dp[(i,j)]
        dp[(i, j)]=False
        return dp[(i,j)]
    return dfs(0,0)
s=input()
p=input()
print(solution(s,p))

